{"version":3,"sources":["components/Header.js","components/Submit.js","components/Card.js","components/List.js","container/App.js","serviceWorker.js","index.js"],"names":["Header","className","style","width","Submit","onclick","onchange","type","placeholder","onChange","onClick","Card","text","id","itemdelete","htmlFor","List","list","onDelete","todoList","map","item","index","key","App","event","state","tasks","textfield","newArr","push","setState","target","value","ondelete","splice","this","height","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAWeA,G,MARA,WACX,OACI,yBAAKC,UAAU,gBAAgBC,MAAO,CAAEC,MAAO,SAC3C,wBAAIF,UAAU,MAAd,YCKGG,EATA,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SACvB,OACI,yBAAKL,UAAU,UACX,2BAAOM,KAAK,OAAOC,YAAY,cAAcP,UAAU,MAAMQ,SAAUH,IACvE,4BAAQC,KAAK,SAASN,UAAU,6BAA6BS,QAASL,GAAtE,SCSGM,G,MAZF,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,WACtB,OACI,yBAAKb,UAAU,iCACX,6BACI,2BAAOM,KAAK,WAAWM,GAAIA,EAAIZ,UAAU,QACzC,2BAAOc,QAASF,GAAhB,IAAsBD,IAE1B,4BAAQX,UAAU,uCAAuCS,QAAS,kBAAMI,EAAWD,KAAnF,aCaGG,EApBF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACZC,EAAWF,EAAKG,KAAI,SAACC,EAAMC,GAC7B,OAEI,kBAAC,EAAD,CACIV,KAAMS,EACNE,IAAKD,EACLT,GAAIS,EACJR,WAAYI,OAKxB,OACI,yBAAKjB,UAAU,WACVkB,I,OC6BEK,E,kDAxCX,aAAe,IAAD,8BACV,gBAOJnB,QAAU,SAACoB,GAAW,IAAD,EACY,EAAKC,MAA1BC,EADS,EACTA,MAAOC,EADE,EACFA,UACTC,EAAM,YAAOF,GACnBE,EAAOC,KAAKF,GACZ,EAAKG,SAAS,CAAEJ,MAAOE,EAAQD,UAAU,MAZ/B,EAgBdtB,SAAW,SAACmB,GACR,EAAKM,SAAS,CAAEH,UAAWH,EAAMO,OAAOC,SAjB9B,EAoBdC,SAAW,SAACZ,GAAW,IACXK,EAAU,EAAKD,MAAfC,MACFE,EAAM,YAAOF,GACnBE,EAAOM,OAAOb,EAAO,GACrB,EAAKS,SAAS,CAAEJ,MAAOE,KAtBvB,EAAKH,MAAQ,CACTC,MAAO,CAAC,QAAS,QAAS,SAC1BC,UAAW,IAJL,E,qDA4BV,OACI,yBAAK3B,UAAU,MACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQK,SAAU8B,KAAK9B,SAAUD,QAAS+B,KAAK/B,UAC/C,kBAAC,aAAD,CAAYH,MAAO,CAAEmC,OAAQ,SACzB,kBAAC,EAAD,CAAMpB,KAAMmB,KAAKV,MAAMC,MAAOT,SAAUkB,KAAKF,iB,GAlC/CI,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8153d9b7.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"pa1  shadow-2\" style={{ width: '100%' }} >\r\n            <h1 className=\"tc\">To-Do</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Submit = ({ onclick, onchange }) => {\r\n    return (\r\n        <div className=\"ma3 tc\">\r\n            <input type=\"text\" placeholder=\"Enter to-do\" className=\"pa2\" onChange={onchange} />\r\n            <button type=\"submit\" className=\"ma3 f6 fw6 ttu tracked pa2\" onClick={onclick}>Add</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Submit;","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({ text, id, itemdelete }) => {\r\n    return (\r\n        <div className=\"card db br2 pa2 ma3 shadow-3 \">\r\n            <div>\r\n                <input type=\"checkbox\" id={id} className=\"ma2\" />\r\n                <label htmlFor={id}> {text}</label>\r\n            </div>\r\n            <button className=\"delete tc ma1 link pv1 ph2 dib white\" onClick={() => itemdelete(id)}>\r\n                &#10007;</button>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst List = ({ list, onDelete }) => {\r\n    const todoList = list.map((item, index) => {\r\n        return (\r\n\r\n            <Card\r\n                text={item}\r\n                key={index}\r\n                id={index}\r\n                itemdelete={onDelete}\r\n            />\r\n\r\n        )\r\n    })\r\n    return (\r\n        <div className=\"ma3 pa1\">\r\n            {todoList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List;","import React from 'react';\r\nimport Header from '../components/Header';\r\nimport Submit from '../components/Submit';\r\nimport List from '../components/List';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            tasks: ['task1', 'task2', 'task3'],\r\n            textfield: ''\r\n        }\r\n    }\r\n\r\n    onclick = (event) => {\r\n        const { tasks, textfield } = this.state;\r\n        const newArr = [...tasks];\r\n        newArr.push(textfield);\r\n        this.setState({ tasks: newArr, textfield:'' })\r\n\r\n    }\r\n\r\n    onchange = (event) => {\r\n        this.setState({ textfield: event.target.value })\r\n    }\r\n\r\n    ondelete = (index) => {\r\n        const { tasks } = this.state;\r\n        const newArr = [...tasks];\r\n        newArr.splice(index, 1);\r\n        this.setState({ tasks: newArr })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"tc\" >\r\n                <Header />\r\n                <Submit onchange={this.onchange} onclick={this.onclick} />\r\n                <Scrollbars style={{ height: '70vh' }}>\r\n                    <List list={this.state.tasks} onDelete={this.ondelete} />\r\n                </Scrollbars>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}